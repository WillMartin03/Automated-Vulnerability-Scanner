#include "includes.hpp"
#include "scanPorts.hpp"
#include "sortPorts.hpp"
#include "prettyPrint.hpp"
#include "canPing.hpp"

void scanPortsRange(sf::IpAddress address, int startPort, int endPort, std::vector<int>& openPorts);
std::vector<int> scanPorts(sf::IpAddress address, int startPort, int endPort, int numThreads);
void prettyPrint(const std::string& message, Color color);
bool canPing(const sf::IpAddress& targetAddress);

int portScanCount;

int main()
{
    sf::IpAddress targetAddress;
    std::string input;
    int startPort = 0;
    int endPort = 65535;
    int numThreads = 128;
    prettyPrint("[!] Please enter target IP address. Type 'self' to use your IP.", Color::Cyan);
    std::getline(std::cin, input);
    prettyPrint("[!] Please enter the start port of the scan range.", Color::Cyan);
    scanf_s("%d", &startPort);
    prettyPrint("[!] Please enter the end port of the scan range.", Color::Cyan);
    scanf_s("%d", &endPort);
    prettyPrint("[!] Please enter the number of threads you'd like to use.", Color::Cyan);
    scanf_s("%d", &numThreads);
    portScanCount = endPort;
    int portsToScan = (std::abs(endPort) - std::abs(startPort)) + 1;

    if (input == "self")
        targetAddress = sf::IpAddress::getPublicAddress();
    else
        targetAddress = sf::IpAddress(input);

    // Now, some input safety checks
    if (endPort == 0)
    {
        endPort = 1;
    }
    if (numThreads == 0)
    {
        numThreads = 1;
    }
    if (startPort < 0)
    {
        startPort = 0;
        prettyPrint("[!] Startport less than 0 detected. Reset to 0.", Color::Yellow);
    }
    if (endPort > 65535)
    {
        endPort = 65535;
        prettyPrint("[!] endPort over 65535 (maximum port) detected. Moved to 65535.", Color::Yellow);
    }
    if (startPort > endPort)
    {
        int temp = startPort;
        startPort = endPort;
        endPort = temp;
        prettyPrint("[!] startPort > endPort detected. Swapping variables.", Color::Yellow);
    }

    if (numThreads > portsToScan)
    {
        prettyPrint("[!] Requested ports is smaller than numThreads. Setting numThreads to port scan range; (1 port per thread)", Color::Yellow);
        numThreads = portsToScan;
    }

    if (endPort / numThreads > 512)
    {
        prettyPrint("[!] Scan may take quite some time due to thread count.\nEach thread is currently scanning more than *512* ports. Recommend increasing numThreads.\nWould you still like to continue? (Y/n)", Color::Yellow);
        char userInput;
        std::cin >> userInput;

        if (userInput != 'Y' && userInput != 'y') {
            prettyPrint("Exiting.", Color::Red);
            return 0;
        }
    }

    prettyPrint("Starting port scan with following parameters:", Color::Green);
    prettyPrint("targetAddress: " + targetAddress.toString(), Color::Green);
    if (startPort <= 0 && endPort >= 65535)
        prettyPrint("[+] Full Scan. All ports will be scanned.", Color::Green);
    else
    {
        prettyPrint("[+] startPort: " + std::to_string(startPort), Color::Green);
        prettyPrint("[+] endPort: " + std::to_string(endPort), Color::Green);
    }
    prettyPrint("[+] Threads: " + std::to_string(numThreads), Color::Green);
    prettyPrint("[+] portsToScan: " + std::to_string(portsToScan), Color::Green);

    /* EXPERIMENTAL FUNCTION
    if (!canPing(targetAddress))
    {
        exit(80);
    }*/

    prettyPrint("Scan will commence in 5 seconds.", Color::Cyan);

    std::this_thread::sleep_for(std::chrono::seconds(5));

    if (portScanCount > 1000)
        prettyPrint("[!] You are attempting to scan more than 1000 ports. The scan output will not output until completion of the scan.\nPlease be patient, as this could take awhile.", Color::Yellow);

    std::vector<int> openPorts = scanPorts(targetAddress, startPort, endPort, numThreads);

    prettyPrint("Scan Complete.", Color::Cyan);
    if (openPorts.size() == 0)
    {
        prettyPrint("No ports in range " + std::to_string(startPort) + "-" + std::to_string(endPort) + " could be identified as open.", Color::Red);
    }
    else
    {
        sortPorts(openPorts);
        prettyPrint("[+] Ports Sorted from least to greatest", Color::Green);
        std::string output = "Open Ports:\n";
        std::ofstream file;
        file.open("openPorts.txt");
        file << "Open Ports:" << std::endl;
        for (size_t i = 0; i < openPorts.size(); i++)
        {
            file << openPorts[i] << '\n';
            if (i == openPorts.size() - 1)
                output += std::to_string(openPorts[i]);
            else
                output += std::to_string(openPorts[i]) + ", ";
        }
        prettyPrint(output, Color::Green);
        file.close();
        prettyPrint("[+] Open Ports saved to ./openPorts.txt", Color::Green);
    }
    prettyPrint("[+] Program finished executing. Exiting..", Color::Green);
    return 0;
}
