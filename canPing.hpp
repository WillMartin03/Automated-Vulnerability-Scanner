#include "includes.hpp"

bool canPing(const sf::IpAddress& targetAddress) {
    sf::UdpSocket socket;
    socket.setBlocking(false); // Set the socket to non-blocking

    // Bind the socket to a local port
    if (socket.bind(sf::Socket::AnyPort) != sf::Socket::Done) {
        std::cerr << "Failed to bind socket to a local port." << std::endl;
        return false;
    }

    sf::SocketSelector selector;
    selector.add(socket);

    sf::Packet packet;
    packet << "Ping";

    int port = 22;
    std::cout << "Sending ping to: " << targetAddress.toString() << ":" << port << std::endl;

    // Attempt to send the packet to the target address and port
    if (socket.send(packet, targetAddress, port) != sf::Socket::Done) {
        std::cout << "Failed to send ping packet." << std::endl;
        return false;
    }

    // Wait for a response with a timeout of 1 second
    if (selector.wait(sf::seconds(1.0f))) {
        sf::Packet response;
        sf::IpAddress sender;
        unsigned short senderPort;

        // Receive the response
        if (socket.receive(response, sender, senderPort) != sf::Socket::Done) {
            std::cout << "Failed to receive response." << std::endl;
            return false;
        }

        // Print information about the response
        std::cout << "Ping successful. Response from: " << sender.toString() << ":" << senderPort << std::endl;
        return true;
    }
    else {
        std::cout << "Timeout: No response received." << std::endl;
        return false;
    }
}
