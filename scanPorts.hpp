#include "includes.hpp"

extern int portScanCount;
std::mutex mtx;

void scanPortsRange(sf::IpAddress address, int startPort, int endPort, std::vector<int>& openPorts)
{
    sf::TcpSocket socket;

    for (int port = startPort; port <= endPort; port++)
    {
        if (portScanCount < 1000)
            std::cout << "Scan " << port << std::endl;
        if (socket.connect(address, port) == sf::Socket::Done)
        {
            std::lock_guard<std::mutex> lock(mtx);
            openPorts.push_back(port);
        }
        socket.disconnect();
    }
}

std::vector<int> scanPorts(sf::IpAddress address, int startPort, int endPort, int numThreads)
{
    std::vector<int> openPorts;
    std::vector<std::thread> threads;

    int portsPerThread = (endPort - startPort + 1) / numThreads;

    for (int i = 0; i < numThreads; i++)
    {
        int threadStartPort = startPort + i * portsPerThread;
        int threadEndPort = (i == numThreads - 1) ? endPort : threadStartPort + portsPerThread - 1;

        threads.emplace_back(scanPortsRange, address, threadStartPort, threadEndPort, std::ref(openPorts));
    }

    for (auto& thread : threads)
    {
        thread.join();
    }

    return openPorts;
}