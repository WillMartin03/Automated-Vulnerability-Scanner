import socket
import threading
from tqdm import tqdm

def get_port_type(port):
	try:
		service_info = socket.getservbyport(port)
		return f'TCP/{service_info}'
	except (socket.error, socket.herror, socket.gaierror, socket.timeout):
		return 'UDP'

def scan_ports(ip, start_port, end_port, result, progress_bar):
	for port in range(start_port, end_port + 1):
		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		sock.settimeout(1)
		is_port_open = sock.connect_ex((ip, port)) == 0
		sock.close()

		# Determine the type of the port
		port_type = get_port_type(port)

		# Append the result to the dictionary with "/TCP" or "/UDP" suffix
		result[port] = f'{port}/{port_type}' if is_port_open else None

		progress_bar.update(1)

def perform():
	ip = input("Enter the IP address to scan: ")
	port_range = input("Enter the port range (e.g., 0-65535): ")
	thread_count = min(int(input("Enter the number of threads: ")), 512)

	start_port, end_port = map(int, port_range.split('-'))

	if (end_port < thread_count):
		thread_count = end_port + 1

	print("Threads:", thread_count)

	ports_per_thread = (end_port - (start_port + 1) + (thread_count - 1)) // thread_count

	result = {}

	total_ports = end_port - start_port + 1
	progress_bar = tqdm(total=total_ports, desc="Scanning Ports", unit="port")

	threads = []
	for i in range(thread_count):
		thread_start = start_port + i * ports_per_thread
		thread_end = min(thread_start + ports_per_thread - 1, end_port)
		thread = threading.Thread(target=scan_ports, args=(ip, thread_start, thread_end, result, progress_bar))
		threads.append(thread)
		thread.start()

	for thread in threads:
		thread.join()

	progress_bar.close()

	open_ports_info = [port_info for port_info in result.values() if port_info is not None]
	open_ports = [int(port.split("/")[0]) for port in open_ports_info]

	# We output the ports with info for user,
	# and write ports to file `ports.txt` for further research
	print("Open ports info:", open_ports_info)

	with open("ports.txt", "w") as f:
		for i in range(len(open_ports)):
			#if (open_ports[i] != ""):
			f.write(str(open_ports[i]) + '\n')
		f.close()

if __name__ == "__main__":
	perform()