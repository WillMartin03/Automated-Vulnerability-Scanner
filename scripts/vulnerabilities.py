import os, subprocess, platform, shutil, winreg as reg

# Helper function to set environment variables
# name = name of the environment variable
# value = value to set the environment variable to
def setEnvVariable(name, value):
	try:
		# Open the system environment variable registry key
		key = reg.OpenKey(reg.HKEY_CURRENT_USER, r'Environment', 0, reg.KEY_SET_VALUE | reg.KEY_READ)

		# Set the environment variable
		reg.SetValueEx(key, name, 0, reg.REG_EXPAND_SZ, value)
		reg.CloseKey(key)

		print(f"Environment variable {name} set to: {value}")
	except Exception as e:
		print(f"Error setting environment variable: `{e}`, are you running as administrator?")

# Helper function to add Metasploit to the PATH environment variable
# system = the system the program is running on
def addToPath():
	try:
		currentPath = os.environ["PATH"]
		msfInstallPath = r"C:\Tools\Metasploit"

		if (platform.system() == "Windows" and f"{msfInstallPath}" not in currentPath):
			setEnvVariable('PATH', os.pathsep.join([msfInstallPath, os.environ['PATH']]))
			print("Added Metasploit to path.")
		else:
			print("Metasploit already in path.")
	except Exception as e:
		print(f"Error adding Metasploit to path: {e}")

# Ensure MSF is installed
def installMSF():
	if platform.system() == "Windows":
		if os.path.isfile(r"C:\Tools\metasploit-framework\msfconsole.exe"): # !!! UNTESTED
			print("Metasploit already installed.")
			return
		command = ["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", ".\\msfInstall.ps1"]
	else:
		if (os.path.isfile("/usr/bin/msfconsole")):
			print("Metasploit already installed.")
			return
		command = ["sudo", "apt-get", "install", "metasploit-framework"]

	try:
		print("Installing Metasploit...")
		process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
		_, error = process.communicate()

		if (process.returncode == 0):
			print("Installation completed successfully.")
		else:
			print(f"Installation failed. Error: {error}")
	except Exception as e:
		print(f"Error during installation: {e}")

	addToPath()

	if (platform.system() == "Windows" and not os.path.isfile(r"C:\Tools\metasploit-framework\msfconsole.exe")):
		zipPath = r'C:\Tools\metasploit-framework.zip'
		extractedPath = r'C:\Tools'

		# Create a folder named 'metasploit-framework' inside the 'C:\Tools\' directory
		targetFolder = os.path.join(extractedPath, 'metasploit-framework')
		os.makedirs(targetFolder, exist_ok=True)

		# Extract the contents of the ZIP file into the newly created folder
		print("Extracting Metasploit...")
		shutil.unpack_archive(zipPath, targetFolder)
		os.remove(zipPath)
		print("Metasploit extracted successfully.")

def createList():
	portlist = []
	try:
		with open("./ports.txt", "r") as f:
			for line in f:
				line = line.strip()
				if line == "\x90":
					break
				portlist.append(line)
		return portlist
	except Exception as e:
		print(e)
		print("Error detected, exiting...")
		exit()

def start(ip):
	installMSF()
	print("Start Vulnerability Scan...")
	portlist = createList()
	for i in range(len(portlist)):
		scan(ip, portlist[i])

def scan(ip, port):
	#result = subprocess.run(f"msfconsole -q -x \"use auxiliary/scanner/portscan/tcp; set RHOSTS {ip}; set RPORT {port}; run\"", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
	#if (result.returncode == 0):
	#	print(result.stdout)
	#else:
	#	print(result.stderr)
	return

if __name__ == "__main__":
	print("Starting from 'vulnerabilities.py'. This is usually for developer purposes, please make sure this is intentional.\nIf you want to run the full program, please execute the 'AVS.py' file instead.")
	start(input("Enter IP Address: "))