import os, subprocess, platform

def addToPath():
	try:
		currentPath = os.environ["PATH"]
		msfInstallPath = "C:\\Tools\\Metasploit"
		newPath = f"{msfInstallPath};{currentPath}"
		os.environ["PATH"] = newPath
		print("Added Metasploit to path.")
	except Exception as e:
		print(f"Error adding Metasploit to path: {e}")

# Ensure MSF is installed
def installMSF():
	if platform.system() == "Windows":
		command = ["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", ".\\msfInstall.ps1"]
	else:
		command = ["sudo", "apt-get", "install", "metasploit-framework"]

	try:
		process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
		_, error = process.communicate()

		if process.returncode == 0:
			print("Installation completed successfully.")
		else:
			print(f"Installation failed. Error: {error}")
	except Exception as e:
		print(f"Error during installation: {e}")

	addToPath()

def createList():
	portlist = []
	try:
		with open("./ports.txt", "r") as f:
			for line in f:
				line = line.strip()
				if line == "\x90":
					break
				portlist.append(line)
		return portlist
	except Exception as e:
		print(e)
		print("Error detected, exiting...")
		exit()

def start(ip):
	installMSF()
	print("Start Vulnerability Scan...")
	portlist = createList()
	for i in range(len(portlist)):
		scan(ip, portlist[i])

def scan(ip, port):
	result = subprocess.run(f"msfconsole -q -x \"use auxiliary/scanner/portscan/tcp; set RHOSTS {ip}; set RPORT {port}; run\"", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
	if (result.returncode == 0):
		print(result.stdout)
	else:
		print(result.stderr)

if __name__ == "__main__":
	print("Starting from 'vulnerabilities.py'. This is usually for developer purposes, please make sure this is intentional.\nIf you want to run the full program, please execute the 'AVS.py' file instead.")
	ip = input("Enter IP Address: ")
	start(ip)